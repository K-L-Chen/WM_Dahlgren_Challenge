syntax = "proto3";
package mil.navy.planner.proto;
option java_multiple_files = true;
import "google/protobuf/any.proto";

// Container message that all proto messages get put into
message MsgContainerPb
{
	MsgHeaderPb Header = 1;
	google.protobuf.Any Content = 2;
}

// Message Header used in server side operations
message MsgHeaderPb
{
	uint32 Id = 1;
	double Time = 2;
	uint32 PlayerId = 3;
	string ContentType = 4;
}

// Sent when a new scenario starts
message ScenarioInitializedNotificationPb {
	int32 sessionId = 1;
}

// Sent when a scenario finishes
message ScenarioConcludedNotificationPb {
	int32 sessionId = 1;
	int32 score = 2;
}

// Sent when an error occurs
message ErrorPb {
	int32 sessionId = 1;
}

// Message containing simulation state information
message StatePb {
	double time = 1;							// Simulation time (seconds)
	int32 score = 2;							// Current cummulative score
	repeated AssetPb assets = 3;				// List of active/controllable assets
	repeated TrackPb Tracks = 4;				// All active tracks, relative to this asset
}

// Message containing client ship actions
message OutputPb {
	repeated ShipActionPb actions = 1;			// List of ship actions
}

// Message containing information on a friendly ships
message AssetPb {
	string AssetName = 1;						// Name of the assets (AssetName in ShipActionPb)
	bool isHVU = 2;								// Whether or not this asset is a high value unit
	int32 health = 3;							// Total health of the asset
	double PositionX = 4;						// Relative position East (meters)
	double PositionY = 5;						// Relative position North (meters)
	double PositionZ = 6;						// Relative position Up (meters)
	repeated double Lle = 7;					// Latitude, longitude, elevation of asset
	repeated WeaponPb weapons = 8;				// State of asset's deployers
}

message WeaponPb {
	string SystemName = 1;						// Containing system name
	uint32 Quantity = 2;						// Quantity
	string WeaponState = 3;						// Available, Unavailable
}

message TrackPb {
	int32 TrackId = 1;							// Track's unique id (TargetId in ShipActionPb)
	string ThreatId = 2;						// Track's name (includes what enemy TrackID this friendly track targeted, Ex: friendlyMissile>enemy_track:1)
	string ThreatRelationship = 3;				// Friendly, Hostile, Neutral
	repeated double Lle = 4;					// Latitude, Longitude, Elevation
	double PositionX = 5;						// Relative position East (meters)
	double PositionY = 6;						// Relative position North (meters)
	double PositionZ = 7;						// Relative position Up (meters)
	double VelocityX = 8;						// Absolute velocity East (meters/sec)
	double VelocityY = 9;						// Absolute velocity North (meters/sec)
	double VelocityZ = 10;						// Absolute velocity Up (meters/sec)
}

message ShipActionPb {
	int32 TargetId = 1;							// Track's unique Id
	string AssetName = 2;						// Asset engaging this track
	string weapon = 3;							// Weapon to deploy
}